rule get_cov_file:
    input:
        "Abundances/{sample}.coverage.txt"
    output:
        "Abundances/{sample}.abundance.txt"
    shell:
        "cut -f 1,5 {input} | grep -v '^#' > {output}"

rule get_abund_list:
    input:
        expand(f"Abundances/{{files}}.abundance.txt", files=config['maxbin_abunds'])
    output:
        "Abundances/abundance_list.txt"
    script:
        "scripts/make_abund_list.py"

rule run_maxbin:
    input:
        abund="Abundances/abundance_list.txt",
        scaff=config["assembly"]
    output:
        directory("Maxbin/All/MBALL")
    log:
        log1="logs/MB_All.log"
    shell:
        "run_MaxBin.pl -contig {input.scaff} -out {output} -abund_list {input.abund}"

rule run_checkm:
    input:
        directory("Maxbin/All/MBALL")
    output:
        directory("CheckM/All")
    shell:
        "checkm lineage_wf -t 8 -x fasta {input} {output}"

rule run_refinem:
    input:
        checkm="CheckM/All",
        abunds=expand(f"Abundances/{{files}}.abundance.txt", files=config['maxbin_abunds']),
        mb=directory("Maxbin/All/MBALL"),
    params:
        assembly=config["assembly"],
        bins=directory("Maxbin/All"),
        bams=expand(f"Bam/{{ref_bams}}.sorted.bam", ref_bams=config['refinem_bams']),
        rm_basedir=config["rm_basedir"],
        reference=config["reference"]
    output:
        directory("RefineM")
    shell:
        "python Scripts/refinem_snakemake.py -a {params.assembly} -b {params.bins} -m {params.bams} -s {params.rm_basedir} -r {params.reference}"



# Side-Chains of the Pipeline

rule run_prodigal:
    input:
        assembly=config["assembly"]
    output:
        faa=f"{config['assembly'].split('.')[0]}.faa",
        out="Prodigal.out"
    shell:
        "prodigal -I {input.assembly} -a {output.faa} -o {output.out}"
